import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, LSTM, BatchNormalization, TimeDistributed
from sklearn.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

#Heart Rate in Hz
HR = 1

#Scan Rate in Volumes Per Minute
SR = 100/7.5

#Samples per Patient
numSam = 250

#Number of Patients
numPat = 50

#Breath Hold On (sec)
bhOn = 15

#Breath Hold Off
bhOff = 45


A = [np.random.random() for i in range (numPat)]
B = [np.random.random() for i in range (numPat)]

x = [[[((A[j] * np.sin((HR / (2 * np.pi)) * ((SR / 60) * i))) + (B[j] * np.cos((HR / (2 * np.pi)) * ((SR / 60) * i)))) + signal.square ((2 * np.pi * i), duty = (bhOn/(bhOn + bhOff)))] for i in range (numSam)] for j in range (numPat)]


y = [(A[i] + B[i])/2 for i in range (numPat)]


X = np.array(x, dtype=float)
Y = np.array(y, dtype=float)

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2)

model = Sequential ()


model.add(LSTM((10), batch_input_shape = (None, numSam, 1), return_sequences=True))
model.add(LSTM((10), return_sequences=True))
model.add(LSTM((10), return_sequences=True))
model.add(LSTM((1), return_sequences=False))
model.compile(loss = 'mean_absolute_error', optimizer = 'adam', metrics = ['accuracy'])
model.summary()

history = model.fit(x_train, y_train, epochs= 150, validation_data=(x_test, y_test))
results = model.predict (x_test)

plt.scatter (range(int(0.2 * numPat)), results, c='r')
plt.scatter (range(int(0.2 * numPat)), y_test, c='g')
plt.show()

plt.plot(history.history['loss'])
plt.show()
