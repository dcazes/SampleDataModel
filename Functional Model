read = open('TempPulseNet/Vars.txt', 'r+')
tmp = read.readlines()    
noise = int(tmp[0])
read.close()
----------------------------------------------------------------------------------------------------------------------------
#######################################################################################################################
## Project Name:    TempPulseNet                                                                                     ##
## Project          Description: A data generator and an RNN to seperate the multiple components of a complex signal ##
## Author:          Daniel Cazes                                                                                     ##
## Date Created:    May 13, 2019                                                                                     ##
## Date of Latest   Revision: Today                                                                                  ##
#######################################################################################################################

##########
# Import #
##########
import tensorflow as tf
import numpy as np
from keras.models import Model
from keras.layers import Dense, GRU, Input, concatenate, AveragePooling1D, Conv1D
from keras.optimizers import Adam
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
from scipy import signal
import csv
from keras.utils import plot_model
----------------------------------------------------------------------------------------------------------------------------
#############################
# Data Generation Variables #
#############################

#Range of Standard Deviation of Noise
#stdvNoiseTop = 1
#stdvNoiseBot = 0.4
stdvNoise = noise / 20

#Range of Number of Patients
#numPatTop = 100
#numPatBot = 100
numPat = 100

#Samples per Patient
numSam = 300

#Test Dataset Size
testSize = 50

#Scan Rate in Seconds per Sample
SR = 0.1

#Center for Heart Rate Normal Distribution (BPM)
cHR = 69
    
#Std. Dev. of Heart Rate (BPM)
stdvHR = 5
    
#Center for Breathing Rate Normal Distribution (BMP)
cBR = 13
    
#Std. Dev. of Heart Rate(BPM)
stdvBR = 2

############################
# Model Training Variables #
############################
        
#Number of Epochs
nEpoch = 100

#Validation Set Size
valSize = 0.2

#Optimizer
opt = 'adam'

#Loss Function
lossFunc = 'MSE'

#Repitition
reps = 1

############################
# Graph and File Variables #
############################

#Font
font_prop = fm.FontProperties(size=16)

#Predictions Vs Actual Name
figName = "MultiTrial WorkAround"

#Output Folder
path = "TempPulseNet/"

#BR Hist Folder
bhf = "BRHist/"

#HR Hist Folder
hhf = "HRHist/"

#HR File Name
dispFile = "Disp%s.csv" %stdvNoise

#ScatterPlot Folder
spf = "Scatter/"

#Disparity Error CSV
errorFile = "TPNdata.csv"

#Run Details (Explain how to compare this Error to other runs' error)
dets = "MultiTrial WorkAround"

GRAPHVIZ_DOT= "release/bin/dot.exe"
----------------------------------------------------------------------------------------------------------------------------
#####################
# Dataset Generator # 
#####################

def dataGen (noiseLevel):
    
    #Random Amplitude Generation
    A = np.random.normal(loc = 0.5, scale = 0.2, size = numPat)
    B = [np.random.random() for i in range (numPat)]
    C = [np.random.random() for i in range (numPat)]
    D = np.random.normal(loc = 0.5, scale = 0.2, size = testSize)
    E = [np.random.random() for i in range (testSize)]
    F = [np.random.random() for i in range (testSize)]
    
    #Normally Distributed Random Frequency Generation
    trainHR = np.random.normal(loc = cHR, scale = stdvHR, size = numPat)
    trainBR = np.random.normal(loc = cBR, scale = stdvBR, size = numPat)
    testHR = np.random.normal(loc = cHR, scale = stdvHR, size = testSize)
    testBR = np.random.normal(loc = cBR, scale = stdvBR, size = testSize)

    #Training Time Series Creation
    x = [[[(A[j] * np.sin((2 * np.pi * (trainHR[j] / 60)) * i)) +
           #(B[j] * np.cos((2 * np.pi * (trainHR[j] / 60)) * i)) +
           (C[j] * np.cos((2 * np.pi * (trainBR[j] / 60)) * (i)))] for i in np.arange (0, SR * numSam, SR)] for j in range (numPat)]

    #Corresponding Amplitudes
    y = [(A[i], C[i]) for i in range (numPat)]

    #Unseen Data Creation
    x_test = [[[(D[j] * np.sin((2 * np.pi * (testHR[j] / 60)) * i)) +
                (E[j] * np.cos((2 * np.pi * (testHR[j] / 60)) * i)) +
                (F[j] * np.cos((2 * np.pi * (testBR[j] / 60)) * (i)))] for i in np.arange (0, SR * numSam, SR)] for j in range (testSize)]

    y_test = [(D[i], F[i]) for i in range (testSize)]
    
    #Convert Lists to Arrays
    X = np.array(x, dtype=float)
    Y = np.array(y, dtype=float)
    X_test = np.array(x_test, dtype=float)
    Y_test = np.array(y_test, dtype=float)
    
    #Noise Generation
    #Adding Noise to Signal
    for i in range (numPat):
        patNoise = np.random.rand() * noiseLevel
        trainNoise = np.random.normal(loc = 0, scale = patNoise, size = numSam)
        for j in range (numSam):
            X[i, j] = X[i, j] + trainNoise[j]
            
    for i in range (testSize):
        tPatNoise = np.random.rand() * noiseLevel
        testNoise = np.random.normal(loc = 0, scale = tPatNoise, size = numSam)
        for j in range (numSam):
            X_test[i, j] = X_test[i, j] + testNoise[j]
        
    #plt.hist(A)
    #plt.show()
    #plt.hist(B)
    #plt.show()
    #plt.hist(trainHR)
    #plt.show()
    #plt.hist(trainBR)
    #plt.show()
    return X, Y, X_test, Y_test
----------------------------------------------------------------------------------------------------------------------------
#######################
# Plotting Input Data #
#######################
def pltInput ():
    plt.figure(figsize=(15,3))
    plt.plot (X[8, :, 0])
    plt.plot (X_test[5, :, 0])
    plt.xlabel ("Sample", fontproperties = font_prop)
    plt.ylabel("Amplitude", fontproperties = font_prop)
    plt.legend (['Time Series 1', 'Time Series 2'], loc = 1)
    plt.show()
----------------------------------------------------------------------------------------------------------------------------
#########
# Model #
#########

def TPNet(X, Y, X_test):
    
    initial = Input(shape = (numSam, 1))
    #avgPool = AveragePooling1D(pool_size = 3)(initial)
    
    fGRU1 = GRU((20), return_sequences=True) (initial)
    fGRU2 = GRU((20), return_sequences=True) (fGRU1)
    
    sGRU1 = GRU((20), return_sequences=True) (initial)
    sGRU2 = GRU((20), return_sequences=True) (sGRU1)
    
    conc = concatenate([fGRU2, sGRU2], axis = 1)
    
    oGRU1 = GRU((20), return_sequences=True) (conc)
    output = GRU((2), return_sequences=False) (oGRU1)
    
    model = Model(inputs = initial, outputs = output)
    model.compile(loss = lossFunc, optimizer = opt)
    
    plot_model(model, to_file= path + 'model.png')
    
    #Validation Data Splitting
    x_train, x_val, y_train, y_val = train_test_split(X, Y, test_size = valSize)

    #Add ", callbacks=[tensorboard_callback]" to model.fit when tensorboard is successful
    history = model.fit(x_train, y_train, epochs= nEpoch,  validation_data=(x_val, y_val))

    #Testing the Model on Unseen Dataset
    predictions = model.predict (X_test)

    return history, predictions
----------------------------------------------------------------------------------------------------------------------------
######################################
#  Error Calculation / Write to File #
######################################
def error(Y_test, pred):
    
    #Disparity Error for Heart Rate signal
    dispHR = [100 * ((Y_test[i, 0] - pred [i, 0]) / (Y_test[i, 0] + pred [i, 0])) for i in range (testSize)]
    dispBR = [100 * ((Y_test[i, 1] - pred [i, 1]) / (Y_test[i, 1] + pred [i, 1])) for i in range (testSize)]
    with open(path + dispFile, 'a') as csvFile:
        for i in range (testSize):
            row = [numPat, numSam, dispHR[i], dispBR[i]]
            writer = csv.writer(csvFile)
            writer.writerow(row)
    csvFile.close()

    #Average Disparity Error
    #dispAvg = [100 * ((Y_test[i, :] - pred [i, :]) / (Y_test[i, :] + pred [i, :])) for i in range (testSize)]

    valLossLow = np.amin(hist.history['val_loss'])
    epLossLow = np.argmin(hist.history['val_loss'])
    
    hrHist = plt.figure()
    plt.title("Heart Amplitude Disparity Histogram", fontproperties = font_prop)
    plt.xlabel ("Disparity", fontproperties = font_prop)
    plt.hist(dispHR, bins = 50)
    plt.tight_layout()
    plt.savefig(path + hhf + figName + "_histHR_NP%s_NL%s_ T%s.png" %(numPat, stdvNoise, trial+1), bbox= 'tight')
    plt.close(hrHist)
    
    brHist = plt.figure()
    plt.title("Breath Amplitude Disparity Histogram", fontproperties = font_prop)
    plt.xlabel ("Disparity", fontproperties = font_prop)
    plt.hist(dispBR, bins = 50)
    plt.tight_layout()
    plt.savefig(path + bhf + figName + "_histBR_NP%s_NL%s_T%s.png" %(numPat, stdvNoise, trial+1), bbox= 'tight')
    plt.close(brHist)
    
    #row = [numPat, numSam, trial+1 , SR, stdvNoise, HRDisp, BRDisp, avgDisp, valLossLow, epLossLow, dets]
    #with open(path + errorFile, 'a') as csvFile:
    #    writer = csv.writer(csvFile)
    #    writer.writerow(row)
    #csvFile.close()
----------------------------------------------------------------------------------------------------------------------------
#############################
# Plot Predictions vs Truth #
#############################

def pltPreds (Y_test, pred):
    fig = plt.figure(figsize=(15,5))
    plt.scatter (range(50), pred[0:50, 0], marker = '.', c='g')
    plt.scatter (range(50), Y_test[0:50, 0], marker ='x', c='g')
    plt.scatter (range(50), pred[0:50, 1], marker = '.', c='r')
    plt.scatter (range(50), Y_test[0:50, 1], marker = 'x', c='r')
    plt.title("Pulse Amplitude (PA) and Breath Amplitude (BA) Predictions vs Truth", fontproperties = font_prop)
    plt.xlabel ("Test Set", fontproperties = font_prop)
    plt.ylabel ("Sinusoidal Amplitude ", fontproperties = font_prop)
    plt.legend (['PA Prediction', 'PA Truth', 'BA Prediction', 'BA Truth'], loc = 4)
    for i in range (0,50, 2):
        plt.plot([i,i], [0,1], color = 'k', linestyle=':', linewidth=0.75)
    plt.tight_layout()
    plt.savefig(path + spf +figName + "-NP%s-NL%s_T%s.png" %(numPat, stdvNoise, trial+1), bbox= 'tight')
    plt.close(fig)
----------------------------------------------------------------------------------------------------------------------------
########
# Main #
########

#for numPat in range (numPatBot,numPatTop + 1, 10):
#    for stdvNoise in np.around(np.arange (stdvNoiseBot, stdvNoiseTop + 0.03, 0.1), 3):
for trial in range(reps):
    print(stdvNoise)
    X, Y, X_test, Y_test = dataGen (stdvNoise)
    pltInput()
    hist, preds = TPNet(X, Y, X_test)
    error(Y_test, preds)
    pltPreds(Y_test, preds)
----------------------------------------------------------------------------------------------------------------------------
if noise > 40:
    poopy
else:
    read = open('TempPulseNet/Vars.txt', 'r+')
    tmp = read.readlines()
    noise = noise + 1
    read.seek(0)
    read.write(str(noise))
read.close()
----------------------------------------------------------------------------------------------------------------------------
%%javascript
//Python.exe Memory Error Work Around
function restart_run_all(){
    IPython.notebook.kernel.restart();
    setTimeout(function(){
        IPython.notebook.execute_all_cells();
    }, 10000)
}
restart_run_all()
----------------------------------------------------------------------------------------------------------------------------
plt.figure(figsize=(6,5))
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.xlabel("Epoch", fontproperties = font_prop)
plt.ylabel("Loss", fontproperties = font_prop)
plt.legend (['Training', 'Validation'], loc = 1)
plt.show()
